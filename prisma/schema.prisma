generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?     @db.Text
  username      String?     @db.Text
  password      String?     @db.Text
  bio           String?     @db.Text
  address       String?     @db.Text
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
  Post          Post[]
  SavedPost     SavedPost[]

  @@index([id])
  @@map("Users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String?
  media_url String      @db.Text
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @db.Uuid
  createdAt DateTime    @default(dbgenerated("now()")) @db.Timestamptz()
  comments  Comment[]
  SavedPost SavedPost[]
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(dbgenerated("now()")) @db.Timestamptz()
}

model SavedPost {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(dbgenerated("now()")) @db.Timestamptz()
}
